import sys
from pathlib import Path
import main
import csv

# This function takes the path of the file generated by the author and the path of the correct output file and compares them. If they match, the author did it correctly! If not, it throws an error. This is all done manually, without any testing framework/library.
def compare_results( correct_path, candidate_path ):
    candidate_content = []
    correct_content = []

    # Check if the candidate output file path exists and read data into candidate_content
    if candidate_path.exists():
        with open( candidate_path, "r") as csvfile:
            csvreader = csv.reader(csvfile)
            for row in csvreader:
                candidate_content.append(row)

    # Check if the correct output file path exists and read the data into candidate content.
    if correct_path.exists():
        with open( correct_path, "r") as csvfile:
            csvreader = csv.reader(csvfile)
            for row in csvreader:
                correct_content.append(row)

    # Confirm that the length of the correct CSV and the candidate CSV match. If not, they can't be the same! 
    if( len(correct_content) != len(candidate_content )):
        print( "ERROR: SIZE OF OUTPUTS DO NOT MATCH!")
        print( "Correct size = " + str(len(correct_content ) ))
        print( "Candidate size = " + str(len(candidate_content) ) )
        return False

    # Go through each row of each document and ensure they match. If not, we print what is wrong.
    row_iterator = 0
    while( row_iterator < len(correct_content)):
        if correct_content[row_iterator] != candidate_content[row_iterator]:
            print( "ERROR! DATA DOES NOT MATCH!")
            print( "CORRECT DATA: \"" + str(correct_content[row_iterator]) +"\"" )
            print( "CANDIDATE DATA: \"" + str(candidate_content[row_iterator]) +"\"" )
            # Note that because we return here, we do not check for all errors, we only display the first error and then quit.
            return False
        row_iterator += 1
    
    # We only get here if 100% of comparisons pass.
    return True


# If this value is set to True, all tests passed. Assume a failure until compare_results asserts a pass condition.
test_passed = False

# Set up paths
output_file_path = Path( "outputs/output.csv" )

# Call user function main function. It will grab the input data itself! 
main.main()

# Run tests comparison between the generated output and the correct output.
correct_output = Path( "key/correct_output.csv" ) 

# Compare Outputs. Returns True if the test passed.
if compare_results( correct_output, output_file_path ):
    test_passed = True
    print( "Output Correct!")


# Print final information about the test out
if test_passed:
    print("")
    print("")
    print("****************")
    print("SYSTEM TEST PASSED!")
    print("****************")
    print("Reach out to Rhodes and Isaac to brag! :)")
    print("****************")
else:
    print("")
    print("")
    print("****************")
    print( "TESTS FAILED!")
    print("****************")
    print("Inspect the error messages above or ")
    print("reach out to Rhodes or Isaac on Signal for assistance!" )
    print("****************")
